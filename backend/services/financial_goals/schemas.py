from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict
from datetime import datetime
from decimal import Decimal


class GoalCreate(BaseModel):
    """Schema –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏."""
    goal_name: str = Field(..., min_length=1, max_length=200, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
    goal_type: str = Field(..., description="–¢–∏–ø —Ü–µ–ª–∏: real_estate, travel, education, emergency, other")
    target_amount: Decimal = Field(..., gt=0, description="–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞")
    deadline_months: int = Field(..., gt=0, le=360, description="–°—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö (–¥–æ 30 –ª–µ—Ç)")
    currency: str = Field(default='KZT', description="–í–∞–ª—é—Ç–∞")
    
    @validator('goal_type')
    def validate_goal_type(cls, v):
        allowed_types = ['real_estate', 'travel', 'education', 'emergency', 'other']
        if v not in allowed_types:
            raise ValueError(f"goal_type must be one of {allowed_types}")
        return v
    
    @validator('currency')
    def validate_currency(cls, v):
        allowed_currencies = ['KZT', 'USD', 'EUR', 'RUB']
        if v not in allowed_currencies:
            raise ValueError(f"currency must be one of {allowed_currencies}")
        return v

    class Config:
        json_schema_extra = {
            "example": {
                "goal_name": "–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                "goal_type": "real_estate",
                "target_amount": 20000000,
                "deadline_months": 60,
                "currency": "KZT"
            }
        }


class GoalUpdate(BaseModel):
    """Schema –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏."""
    goal_name: Optional[str] = Field(None, min_length=1, max_length=200)
    target_amount: Optional[Decimal] = Field(None, gt=0)
    deadline_months: Optional[int] = Field(None, gt=0, le=360)
    current_savings: Optional[Decimal] = Field(None, ge=0)
    status: Optional[str] = None
    
    @validator('status')
    def validate_status(cls, v):
        if v is not None:
            allowed_statuses = ['active', 'achieved', 'failed', 'cancelled']
            if v not in allowed_statuses:
                raise ValueError(f"status must be one of {allowed_statuses}")
        return v


class MLPrediction(BaseModel):
    """Schema –¥–ª—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    probability: float = Field(..., ge=0, le=1, description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    recommended_monthly_savings: Decimal = Field(..., description="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—É–º–º–∞")
    can_achieve: bool = Field(..., description="–î–æ—Å—Ç–∏–∂–∏–º–æ –ª–∏ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ä–æ–∫")
    risk_level: str = Field(..., description="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: low, medium, high")
    insights: List[str] = Field(default=[], description="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    scenarios: Dict = Field(default={}, description="–†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
    
    class Config:
        json_schema_extra = {
            "example": {
                "probability": 0.75,
                "recommended_monthly_savings": 350000,
                "can_achieve": True,
                "risk_level": "low",
                "insights": [
                    "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏.",
                    "üëç –£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π (22%). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                ],
                "scenarios": {
                    "optimistic": {
                        "months_needed": 48,
                        "monthly_savings": 420000,
                        "description": "–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞ –Ω–∞ 20%"
                    }
                }
            }
        }


class GoalResponse(BaseModel):
    """Schema –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª–∏."""
    id: int
    user_id: int
    goal_name: str
    goal_type: str
    target_amount: Decimal
    current_savings: Decimal
    deadline_months: int
    currency: str
    predicted_probability: Optional[float]
    recommended_monthly_savings: Optional[Decimal]
    risk_level: Optional[str]
    ai_insights: Optional[str]
    status: str
    created_at: datetime
    updated_at: datetime
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    prediction: Optional[MLPrediction] = None
    progress_percentage: Optional[float] = None
    
    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "id": 1,
                "user_id": 1,
                "goal_name": "–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                "goal_type": "real_estate",
                "target_amount": 20000000,
                "current_savings": 2000000,
                "deadline_months": 60,
                "currency": "KZT",
                "predicted_probability": 0.75,
                "recommended_monthly_savings": 350000,
                "risk_level": "low",
                "status": "active",
                "created_at": "2024-01-01T00:00:00",
                "updated_at": "2024-01-01T00:00:00",
                "progress_percentage": 10.0
            }
        }


class GoalListResponse(BaseModel):
    """Schema –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π."""
    goals: List[GoalResponse]
    total: int
    active_goals: int
    achieved_goals: int
    
    class Config:
        json_schema_extra = {
            "example": {
                "goals": [],
                "total": 5,
                "active_goals": 3,
                "achieved_goals": 2
            }
        }


class GoalRecommendations(BaseModel):
    """Schema –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–ª—è–º."""
    monthly_savings_capacity: float
    savings_rate_percentage: float
    recommended_emergency_fund: float
    has_emergency_fund: bool
    suggestions: List[str]
    
    class Config:
        json_schema_extra = {
            "example": {
                "monthly_savings_capacity": 150000,
                "savings_rate_percentage": 22.5,
                "recommended_emergency_fund": 2100000,
                "has_emergency_fund": True,
                "suggestions": [
                    "Excellent savings rate! You're on track for financial security.",
                    "You can comfortably save $150000.00 per month."
                ]
            }
        }

